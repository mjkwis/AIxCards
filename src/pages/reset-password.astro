---
/**
 * Reset Password Request Page
 *
 * Page for requesting a password reset link
 */

import PublicLayout from "@/layouts/PublicLayout.astro";
import { ResetPasswordRequestForm } from "@/components/auth/ResetPasswordRequestForm";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

// If user is already logged in, redirect to dashboard
const {
  data: { session },
} = await Astro.locals.supabase.auth.getSession();
if (session?.user) {
  return Astro.redirect("/dashboard/generate");
}

const isDev = import.meta.env.DEV;
---

<PublicLayout title="Resetuj has≈Ço - AIxCards" description="Zresetuj has≈Ço do swojego konta AIxCards">
  <div class="container mx-auto px-4 py-16">
    <div class="max-w-md mx-auto">
      <div class="text-center mb-8">
        <h1 class="text-3xl font-bold mb-2">Nie pamiƒôtasz has≈Ça?</h1>
        <p class="text-muted-foreground">Wy≈õlemy Ci link do resetowania has≈Ça na Tw√≥j adres email</p>
      </div>

      <div data-react-root>
        <Card>
          <CardHeader>
            <CardTitle>Resetowanie has≈Ça</CardTitle>
            <CardDescription> Wprowad≈∫ adres email powiƒÖzany z Twoim kontem </CardDescription>
          </CardHeader>
          <CardContent>
            <ResetPasswordRequestForm client:load />
          </CardContent>
        </Card>

        {
          isDev && (
            <Card className="mt-4 border-yellow-200 dark:border-yellow-800 bg-yellow-50 dark:bg-yellow-950/20">
              <CardHeader>
                <CardTitle className="text-sm text-yellow-800 dark:text-yellow-200">üîß Tryb deweloperski</CardTitle>
                <CardDescription className="text-yellow-700 dark:text-yellow-300">
                  Testuj resetowanie has≈Ça bez wysy≈Çania emaila
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form id="dev-reset-form" class="space-y-3">
                  <div>
                    <label for="dev-email" class="text-sm font-medium text-yellow-900 dark:text-yellow-100">
                      Email testowy
                    </label>
                    <input
                      type="email"
                      id="dev-email"
                      name="email"
                      placeholder="test@example.com"
                      required
                      class="mt-1 w-full px-3 py-2 border border-yellow-300 dark:border-yellow-700 rounded-md bg-white dark:bg-yellow-950/50 text-yellow-900 dark:text-yellow-100 focus:outline-none focus:ring-2 focus:ring-yellow-500"
                    />
                  </div>
                  <Button
                    type="submit"
                    variant="outline"
                    className="w-full border-yellow-600 text-yellow-700 hover:bg-yellow-100 dark:border-yellow-500 dark:text-yellow-300 dark:hover:bg-yellow-900/30"
                  >
                    Wygeneruj link i przekieruj
                  </Button>
                </form>
              </CardContent>
            </Card>
          )
        }
      </div>
    </div>
  </div>
</PublicLayout>

<script>
  if (import.meta.env.DEV) {
    const form = document.getElementById("dev-reset-form");
    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const emailInput = (e.target as HTMLFormElement).querySelector<HTMLInputElement>("#dev-email");
        const email = emailInput?.value;

        if (!email) return;

        try {
          const response = await fetch("/api/auth/password/mock-reset?redirect=1", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email }),
            redirect: "manual",
          });

          if (response.type === "opaqueredirect" || response.status === 302 || response.status === 0) {
            // Browser will follow redirect automatically
            window.location.href = response.headers.get("Location") || "/update-password";
          } else {
            // Fallback: parse JSON and redirect manually
            const data = await response.json();
            if (data.resetLink) {
              window.location.href = data.resetLink;
            }
          }
        } catch (error) {
          console.error("Dev reset error:", error);
          alert("WystƒÖpi≈Ç b≈ÇƒÖd podczas generowania linku");
        }
      });
    }
  }
</script>
