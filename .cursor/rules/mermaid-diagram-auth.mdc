---
description:
globs:
alwaysApply: false
---
# Mermaid Diagram - Auth Architecture

You are a security specialist whose task is to create a Mermaid diagram to visualize the authentication flow for the login and registration module. The diagram should be created in the following file: DESTINATION

You will need to refer to the following files to understand existing requirements:

<file_references>
[project-prd.md](mdc:.ai/project-prd.md)
</file_references>

<destination>
.ai/diagrams/auth.md
</destination>

Your task is to analyze the login and registration module specification and create a comprehensive Mermaid diagram that accurately represents the authentication sequence. The diagram should be in English.

Before creating the diagram, analyze the requirements and plan your approach. Place your analysis within <authentication_analysis> tags. In this analysis:

1. Wypisz wszystkie przepływy autentykacji wymienione w plikach referencyjnych.
2. Zidentyfikuj głównych aktorów i ich interakcje.
3. Określ procesy weryfikacji i odświeżania tokenów.
4. Dostarcz krótki opis każdego kroku autentykacji.

Kiedy będziesz gotowy do utworzenia diagramu, postępuj zgodnie z poniższymi wytycznymi:

1. Rozpocznij diagram od następującej składni:

   ```mermaid
   sequenceDiagram
   ```

2. Uwzględnij następujące elementy w swoim diagramie:

   - Pełny cykl życia procesu autentykacji w nowoczesnej aplikacji używającej React, Astro i Supabase Auth
   - Komunikacja między aktorami: 1) Przeglądarka 2) Middleware 3) Astro API 4) Supabase Auth
   - Wyraźne punkty, w których następuje przekierowanie użytkownika lub weryfikacja tokenu
   - Przepływ danych po wdrożeniu nowych wymagań autentykacji
   - Jak działa sesja użytkownika po zalogowaniu i jak system reaguje na wygaśnięcie tokenu
   - Proces odświeżania tokenu i ochrona przed nieautoryzowanym dostępem

3. Przestrzegaj tych zasad składni Mermaid:

   - Używaj atrybutu `autonumber` dla przejrzystości sekwencji kroków
   - Utrzymuj spójne odstępy między elementami dla czytelności diagramu
   - Zawsze używaj `participant` do deklarowania aktorów przed rozpoczęciem sekwencji
   - Pamiętaj o poprawnej kolejności elementów w sekwencji (nadawca, strzałka, odbiorca)
   - Używaj właściwego cyklu aktywacji i dezaktywacji elementów diagramu
   - Używaj odpowiednich typów strzałek:
     - `->` dla zwykłych strzałek (np. `Browser->API`)
     - `-->` dla przerywanych strzałek (np. `API-->Browser: Token expired`)
     - `->>` dla strzałek z pustymi grotami (np. `Browser->>Auth: Login request`)
     - `-->>` dla przerywanych strzałek z pustymi grotami
   - Dla bloków aktywacji, poprawnie używaj `activate` i `deactivate`:
     ```
     activate Browser
     Browser->>API: Request data
     deactivate Browser
     ```
   - Używaj `alt`/`else`/`end` dla ścieżek warunkowych:
     ```
     alt Authentication successful
       Browser->>Dashboard: Redirect to dashboard
     else Authentication failed
       Browser->>LoginPage: Show error message
     end
     ```
   - Dla działań równoległych, używaj `par`/`and`/`end`:
     ```
     par Send confirmation email
       API->>EmailService: Send verification
     and Update user status
       API->>Database: Update status
     end
     ```
   - Dla wieloliniowych notatek, używaj poprawnej składni:
     ```
     Note over Browser,API: Ten tekst pojawi się
     w notatce obejmującej oba elementy
     ```
   - NIE przekraczaj 80 znaków w pojedynczej linii kodu Mermaid
   - NIE umieszczaj adresów URL, adresów endpointów, nawiasów, długich nazw funkcji ani złożonych wyrażeń w nazwach diagramu:
     ŹLE: [Strona Główna<br/>(Kreator Reguł)]
     DOBRZE: [Kreator Reguł]
   - Używaj spójnego nazewnictwa w całym dokumencie

4. Avoid these common mistakes:
   - Missing Mermaid section declaration and diagram type at the beginning
   - Incorrect arrow syntax (e.g. -> instead of ->>)
   - Using forbidden characters in identifiers without placing them in quotes
   - Unbalanced code blocks (missing end for started blocks)
   - Exceeding line length limits
   - Incorrect nesting of conditional blocks

After creating the diagram, review it carefully to ensure there are no syntax errors or rendering issues. Make necessary corrections to improve clarity and accuracy.

When you're ready to present the final diagram, use <mermaid_diagram> tags to surround it.
